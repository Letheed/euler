/* The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */

#![feature(step_by)]

struct TriangleNumber {
    number: u64,
    index: u64,
}

impl TriangleNumber {
    fn new() -> Self {
        TriangleNumber {
            number: 0,
            index: 0,
        }
    }
}

impl Iterator for TriangleNumber {
    type Item = u64;

    fn next(&mut self) -> Option<Self::Item> {
        self.number += self.index;
        self.index += 1;
        Some(self.number)
    }
}

fn main() {
    println!("{}", TriangleNumber::new().skip_while(|&n| divisor_count(n) <= 500).next().unwrap());
}

fn divisor_count(n: u64) -> usize {
    let ubound = sqrt(n);
    2 * if n % 2 == 0 { (1..ubound + 1).filter(|d| n % d == 0).count() }
    else { (1..ubound + 1).step_by(2).filter(|d| n % d == 0).count() }
}

fn sqrt(n: u64) -> u64 {
    (n as f64).sqrt().floor() as u64
}
